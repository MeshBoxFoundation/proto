// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: src/service/gateway.proto

package service

import (
	transaction "github.com/MeshBoxFoundation/proto/golang/transaction"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloseState int32

const (
	CloseState_close_state_closable CloseState = 0
	CloseState_close_state_closing  CloseState = 1
	CloseState_close_state_closed   CloseState = 2
	CloseState_close_state_dispute  CloseState = 3
)

// Enum value maps for CloseState.
var (
	CloseState_name = map[int32]string{
		0: "close_state_closable",
		1: "close_state_closing",
		2: "close_state_closed",
		3: "close_state_dispute",
	}
	CloseState_value = map[string]int32{
		"close_state_closable": 0,
		"close_state_closing":  1,
		"close_state_closed":   2,
		"close_state_dispute":  3,
	}
)

func (x CloseState) Enum() *CloseState {
	p := new(CloseState)
	*p = x
	return p
}

func (x CloseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseState) Descriptor() protoreflect.EnumDescriptor {
	return file_src_service_gateway_proto_enumTypes[0].Descriptor()
}

func (CloseState) Type() protoreflect.EnumType {
	return &file_src_service_gateway_proto_enumTypes[0]
}

func (x CloseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseState.Descriptor instead.
func (CloseState) EnumDescriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{0}
}

type GatewayConfigReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GatewayConfigReqV1) Reset() {
	*x = GatewayConfigReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigReqV1) ProtoMessage() {}

func (x *GatewayConfigReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigReqV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayConfigReqV1) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GatewayConfigRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*transaction.BlockchainVarV1 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GatewayConfigRespV1) Reset() {
	*x = GatewayConfigRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigRespV1) ProtoMessage() {}

func (x *GatewayConfigRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigRespV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayConfigRespV1) GetResult() []*transaction.BlockchainVarV1 {
	if x != nil {
		return x.Result
	}
	return nil
}

type GatewayConfigUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayConfigUpdateReqV1) Reset() {
	*x = GatewayConfigUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigUpdateReqV1) ProtoMessage() {}

func (x *GatewayConfigUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigUpdateReqV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{2}
}

type GatewayConfigUpdateStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GatewayConfigUpdateStreamedRespV1) Reset() {
	*x = GatewayConfigUpdateStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigUpdateStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigUpdateStreamedRespV1) ProtoMessage() {}

func (x *GatewayConfigUpdateStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigUpdateStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigUpdateStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *GatewayConfigUpdateStreamedRespV1) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GatewayValidatorsReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity uint32 `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *GatewayValidatorsReqV1) Reset() {
	*x = GatewayValidatorsReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayValidatorsReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayValidatorsReqV1) ProtoMessage() {}

func (x *GatewayValidatorsReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayValidatorsReqV1.ProtoReflect.Descriptor instead.
func (*GatewayValidatorsReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayValidatorsReqV1) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type GatewayValidatorsRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RoutingAddress `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GatewayValidatorsRespV1) Reset() {
	*x = GatewayValidatorsRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayValidatorsRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayValidatorsRespV1) ProtoMessage() {}

func (x *GatewayValidatorsRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayValidatorsRespV1.ProtoReflect.Descriptor instead.
func (*GatewayValidatorsRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayValidatorsRespV1) GetResult() []*RoutingAddress {
	if x != nil {
		return x.Result
	}
	return nil
}

type GatewayRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to Msg:
	//	*GatewayRespV1_IsActiveResp
	//	*GatewayRespV1_IsOverpaidResp
	//	*GatewayRespV1_CloseResp
	//	*GatewayRespV1_FollowStreamedResp
	//	*GatewayRespV1_RoutingStreamedResp
	//	*GatewayRespV1_ConfigResp
	//	*GatewayRespV1_ConfigUpdateStreamedResp
	//	*GatewayRespV1_ValidatorsResp
	Msg       isGatewayRespV1_Msg `protobuf_oneof:"msg"`
	BlockTime uint64              `protobuf:"varint,10,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockAge  uint64              `protobuf:"varint,11,opt,name=block_age,json=blockAge,proto3" json:"block_age,omitempty"`
}

func (x *GatewayRespV1) Reset() {
	*x = GatewayRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRespV1) ProtoMessage() {}

func (x *GatewayRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayRespV1) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GatewayRespV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (m *GatewayRespV1) GetMsg() isGatewayRespV1_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GatewayRespV1) GetIsActiveResp() *GatewayScIsActiveRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_IsActiveResp); ok {
		return x.IsActiveResp
	}
	return nil
}

func (x *GatewayRespV1) GetIsOverpaidResp() *GatewayScIsOverpaidRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_IsOverpaidResp); ok {
		return x.IsOverpaidResp
	}
	return nil
}

func (x *GatewayRespV1) GetCloseResp() *GatewayScCloseRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_CloseResp); ok {
		return x.CloseResp
	}
	return nil
}

func (x *GatewayRespV1) GetFollowStreamedResp() *GatewayScFollowStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_FollowStreamedResp); ok {
		return x.FollowStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetRoutingStreamedResp() *GatewayRoutingStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_RoutingStreamedResp); ok {
		return x.RoutingStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetConfigResp() *GatewayConfigRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ConfigResp); ok {
		return x.ConfigResp
	}
	return nil
}

func (x *GatewayRespV1) GetConfigUpdateStreamedResp() *GatewayConfigUpdateStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ConfigUpdateStreamedResp); ok {
		return x.ConfigUpdateStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetValidatorsResp() *GatewayValidatorsRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ValidatorsResp); ok {
		return x.ValidatorsResp
	}
	return nil
}

func (x *GatewayRespV1) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *GatewayRespV1) GetBlockAge() uint64 {
	if x != nil {
		return x.BlockAge
	}
	return 0
}

type isGatewayRespV1_Msg interface {
	isGatewayRespV1_Msg()
}

type GatewayRespV1_IsActiveResp struct {
	IsActiveResp *GatewayScIsActiveRespV1 `protobuf:"bytes,3,opt,name=is_active_resp,json=isActiveResp,proto3,oneof"`
}

type GatewayRespV1_IsOverpaidResp struct {
	IsOverpaidResp *GatewayScIsOverpaidRespV1 `protobuf:"bytes,4,opt,name=is_overpaid_resp,json=isOverpaidResp,proto3,oneof"`
}

type GatewayRespV1_CloseResp struct {
	CloseResp *GatewayScCloseRespV1 `protobuf:"bytes,5,opt,name=close_resp,json=closeResp,proto3,oneof"`
}

type GatewayRespV1_FollowStreamedResp struct {
	FollowStreamedResp *GatewayScFollowStreamedRespV1 `protobuf:"bytes,6,opt,name=follow_streamed_resp,json=followStreamedResp,proto3,oneof"`
}

type GatewayRespV1_RoutingStreamedResp struct {
	RoutingStreamedResp *GatewayRoutingStreamedRespV1 `protobuf:"bytes,7,opt,name=routing_streamed_resp,json=routingStreamedResp,proto3,oneof"`
}

type GatewayRespV1_ConfigResp struct {
	ConfigResp *GatewayConfigRespV1 `protobuf:"bytes,8,opt,name=config_resp,json=configResp,proto3,oneof"`
}

type GatewayRespV1_ConfigUpdateStreamedResp struct {
	ConfigUpdateStreamedResp *GatewayConfigUpdateStreamedRespV1 `protobuf:"bytes,9,opt,name=config_update_streamed_resp,json=configUpdateStreamedResp,proto3,oneof"`
}

type GatewayRespV1_ValidatorsResp struct {
	ValidatorsResp *GatewayValidatorsRespV1 `protobuf:"bytes,12,opt,name=validators_resp,json=validatorsResp,proto3,oneof"`
}

func (*GatewayRespV1_IsActiveResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_IsOverpaidResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_CloseResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_FollowStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_RoutingStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ConfigResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ConfigUpdateStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ValidatorsResp) isGatewayRespV1_Msg() {}

type GatewayScIsActiveReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId    []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
}

func (x *GatewayScIsActiveReqV1) Reset() {
	*x = GatewayScIsActiveReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsActiveReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsActiveReqV1) ProtoMessage() {}

func (x *GatewayScIsActiveReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsActiveReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsActiveReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *GatewayScIsActiveReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsActiveReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

type GatewayScIsActiveRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId               []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner            []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	Active             bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ScExpiryAtBlock    uint64 `protobuf:"varint,4,opt,name=sc_expiry_at_block,json=scExpiryAtBlock,proto3" json:"sc_expiry_at_block,omitempty"`
	ScOriginalDcAmount uint64 `protobuf:"varint,5,opt,name=sc_original_dc_amount,json=scOriginalDcAmount,proto3" json:"sc_original_dc_amount,omitempty"`
}

func (x *GatewayScIsActiveRespV1) Reset() {
	*x = GatewayScIsActiveRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsActiveRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsActiveRespV1) ProtoMessage() {}

func (x *GatewayScIsActiveRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsActiveRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsActiveRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayScIsActiveRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsActiveRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsActiveRespV1) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *GatewayScIsActiveRespV1) GetScExpiryAtBlock() uint64 {
	if x != nil {
		return x.ScExpiryAtBlock
	}
	return 0
}

func (x *GatewayScIsActiveRespV1) GetScOriginalDcAmount() uint64 {
	if x != nil {
		return x.ScOriginalDcAmount
	}
	return 0
}

type GatewayScIsOverpaidReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner  []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	TotalDcs uint64 `protobuf:"varint,3,opt,name=total_dcs,json=totalDcs,proto3" json:"total_dcs,omitempty"`
}

func (x *GatewayScIsOverpaidReqV1) Reset() {
	*x = GatewayScIsOverpaidReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsOverpaidReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsOverpaidReqV1) ProtoMessage() {}

func (x *GatewayScIsOverpaidReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsOverpaidReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsOverpaidReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *GatewayScIsOverpaidReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsOverpaidReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsOverpaidReqV1) GetTotalDcs() uint64 {
	if x != nil {
		return x.TotalDcs
	}
	return 0
}

type GatewayScIsOverpaidRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner  []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	Overpaid bool   `protobuf:"varint,3,opt,name=overpaid,proto3" json:"overpaid,omitempty"`
}

func (x *GatewayScIsOverpaidRespV1) Reset() {
	*x = GatewayScIsOverpaidRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsOverpaidRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsOverpaidRespV1) ProtoMessage() {}

func (x *GatewayScIsOverpaidRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsOverpaidRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsOverpaidRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *GatewayScIsOverpaidRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsOverpaidRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsOverpaidRespV1) GetOverpaid() bool {
	if x != nil {
		return x.Overpaid
	}
	return false
}

type GatewayScCloseReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseTxn *transaction.BlockchainTxnStateChannelCloseV1 `protobuf:"bytes,1,opt,name=close_txn,json=closeTxn,proto3" json:"close_txn,omitempty"`
}

func (x *GatewayScCloseReqV1) Reset() {
	*x = GatewayScCloseReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScCloseReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScCloseReqV1) ProtoMessage() {}

func (x *GatewayScCloseReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScCloseReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScCloseReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayScCloseReqV1) GetCloseTxn() *transaction.BlockchainTxnStateChannelCloseV1 {
	if x != nil {
		return x.CloseTxn
	}
	return nil
}

type GatewayScCloseRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	Response []byte `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GatewayScCloseRespV1) Reset() {
	*x = GatewayScCloseRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScCloseRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScCloseRespV1) ProtoMessage() {}

func (x *GatewayScCloseRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScCloseRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScCloseRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *GatewayScCloseRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScCloseRespV1) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type GatewayScFollowReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId    []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
}

func (x *GatewayScFollowReqV1) Reset() {
	*x = GatewayScFollowReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScFollowReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScFollowReqV1) ProtoMessage() {}

func (x *GatewayScFollowReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScFollowReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScFollowReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayScFollowReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScFollowReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

type GatewayScFollowStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId       []byte     `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner    []byte     `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	CloseState CloseState `protobuf:"varint,3,opt,name=close_state,json=closeState,proto3,enum=smartmesh.CloseState" json:"close_state,omitempty"`
}

func (x *GatewayScFollowStreamedRespV1) Reset() {
	*x = GatewayScFollowStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScFollowStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScFollowStreamedRespV1) ProtoMessage() {}

func (x *GatewayScFollowStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScFollowStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScFollowStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *GatewayScFollowStreamedRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScFollowStreamedRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScFollowStreamedRespV1) GetCloseState() CloseState {
	if x != nil {
		return x.CloseState
	}
	return CloseState_close_state_closable
}

type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui       uint32            `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Owner     []byte            `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Addresses []*RoutingAddress `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Filters   [][]byte          `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Subnets   [][]byte          `protobuf:"bytes,5,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *Routing) GetOui() uint32 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *Routing) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Routing) GetAddresses() []*RoutingAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Routing) GetFilters() [][]byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Routing) GetSubnets() [][]byte {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type RoutingAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Uri    []byte `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *RoutingAddress) Reset() {
	*x = RoutingAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingAddress) ProtoMessage() {}

func (x *RoutingAddress) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingAddress.ProtoReflect.Descriptor instead.
func (*RoutingAddress) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *RoutingAddress) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *RoutingAddress) GetUri() []byte {
	if x != nil {
		return x.Uri
	}
	return nil
}

type GatewayRoutingReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GatewayRoutingReqV1) Reset() {
	*x = GatewayRoutingReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoutingReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoutingReqV1) ProtoMessage() {}

func (x *GatewayRoutingReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoutingReqV1.ProtoReflect.Descriptor instead.
func (*GatewayRoutingReqV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *GatewayRoutingReqV1) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GatewayRoutingStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routings []*Routing `protobuf:"bytes,1,rep,name=routings,proto3" json:"routings,omitempty"`
}

func (x *GatewayRoutingStreamedRespV1) Reset() {
	*x = GatewayRoutingStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_service_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoutingStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoutingStreamedRespV1) ProtoMessage() {}

func (x *GatewayRoutingStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_src_service_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoutingStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRoutingStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_src_service_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *GatewayRoutingStreamedRespV1) GetRoutings() []*Routing {
	if x != nil {
		return x.Routings
	}
	return nil
}

var File_src_service_gateway_proto protoreflect.FileDescriptor

var file_src_service_gateway_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x1a, 0x25, 0x73, 0x72, 0x63, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x73, 0x72, 0x63, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2b, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4e, 0x0a,
	0x16, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x72, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x0a,
	0x1c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x22, 0x3c, 0x0a,
	0x26, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x37, 0x0a, 0x19, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x1a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xca, 0x06, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x55, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x73, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61,
	0x0a, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x12, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x67, 0x65, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x4d, 0x0a, 0x1b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73,
	0x63, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x63, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x63, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x1d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x63, 0x73, 0x22, 0x6c, 0x0a, 0x1e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x17, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x78,
	0x6e, 0x22, 0x4b, 0x0a, 0x18, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0x0a, 0x18, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x30, 0x0a, 0x16, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0a, 0x20,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2a, 0x71, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x10, 0x03, 0x32, 0x8f, 0x05, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x52, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x12,
	0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x73, 0x63, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a,
	0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x4a, 0x0a, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x50, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x63, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x76, 0x31, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x56, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x76, 0x31, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_service_gateway_proto_rawDescOnce sync.Once
	file_src_service_gateway_proto_rawDescData = file_src_service_gateway_proto_rawDesc
)

func file_src_service_gateway_proto_rawDescGZIP() []byte {
	file_src_service_gateway_proto_rawDescOnce.Do(func() {
		file_src_service_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_service_gateway_proto_rawDescData)
	})
	return file_src_service_gateway_proto_rawDescData
}

var file_src_service_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_service_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_src_service_gateway_proto_goTypes = []interface{}{
	(CloseState)(0),                                      // 0: smartmesh.close_state
	(*GatewayConfigReqV1)(nil),                           // 1: smartmesh.gateway_config_req_v1
	(*GatewayConfigRespV1)(nil),                          // 2: smartmesh.gateway_config_resp_v1
	(*GatewayConfigUpdateReqV1)(nil),                     // 3: smartmesh.gateway_config_update_req_v1
	(*GatewayConfigUpdateStreamedRespV1)(nil),            // 4: smartmesh.gateway_config_update_streamed_resp_v1
	(*GatewayValidatorsReqV1)(nil),                       // 5: smartmesh.gateway_validators_req_v1
	(*GatewayValidatorsRespV1)(nil),                      // 6: smartmesh.gateway_validators_resp_v1
	(*GatewayRespV1)(nil),                                // 7: smartmesh.gateway_resp_v1
	(*GatewayScIsActiveReqV1)(nil),                       // 8: smartmesh.gateway_sc_is_active_req_v1
	(*GatewayScIsActiveRespV1)(nil),                      // 9: smartmesh.gateway_sc_is_active_resp_v1
	(*GatewayScIsOverpaidReqV1)(nil),                     // 10: smartmesh.gateway_sc_is_overpaid_req_v1
	(*GatewayScIsOverpaidRespV1)(nil),                    // 11: smartmesh.gateway_sc_is_overpaid_resp_v1
	(*GatewayScCloseReqV1)(nil),                          // 12: smartmesh.gateway_sc_close_req_v1
	(*GatewayScCloseRespV1)(nil),                         // 13: smartmesh.gateway_sc_close_resp_v1
	(*GatewayScFollowReqV1)(nil),                         // 14: smartmesh.gateway_sc_follow_req_v1
	(*GatewayScFollowStreamedRespV1)(nil),                // 15: smartmesh.gateway_sc_follow_streamed_resp_v1
	(*Routing)(nil),                                      // 16: smartmesh.routing
	(*RoutingAddress)(nil),                               // 17: smartmesh.routing_address
	(*GatewayRoutingReqV1)(nil),                          // 18: smartmesh.gateway_routing_req_v1
	(*GatewayRoutingStreamedRespV1)(nil),                 // 19: smartmesh.gateway_routing_streamed_resp_v1
	(*transaction.BlockchainVarV1)(nil),                  // 20: smartmesh.blockchain_var_v1
	(*transaction.BlockchainTxnStateChannelCloseV1)(nil), // 21: smartmesh.blockchain_txn_state_channel_close_v1
}
var file_src_service_gateway_proto_depIdxs = []int32{
	20, // 0: smartmesh.gateway_config_resp_v1.result:type_name -> smartmesh.blockchain_var_v1
	17, // 1: smartmesh.gateway_validators_resp_v1.result:type_name -> smartmesh.routing_address
	9,  // 2: smartmesh.gateway_resp_v1.is_active_resp:type_name -> smartmesh.gateway_sc_is_active_resp_v1
	11, // 3: smartmesh.gateway_resp_v1.is_overpaid_resp:type_name -> smartmesh.gateway_sc_is_overpaid_resp_v1
	13, // 4: smartmesh.gateway_resp_v1.close_resp:type_name -> smartmesh.gateway_sc_close_resp_v1
	15, // 5: smartmesh.gateway_resp_v1.follow_streamed_resp:type_name -> smartmesh.gateway_sc_follow_streamed_resp_v1
	19, // 6: smartmesh.gateway_resp_v1.routing_streamed_resp:type_name -> smartmesh.gateway_routing_streamed_resp_v1
	2,  // 7: smartmesh.gateway_resp_v1.config_resp:type_name -> smartmesh.gateway_config_resp_v1
	4,  // 8: smartmesh.gateway_resp_v1.config_update_streamed_resp:type_name -> smartmesh.gateway_config_update_streamed_resp_v1
	6,  // 9: smartmesh.gateway_resp_v1.validators_resp:type_name -> smartmesh.gateway_validators_resp_v1
	21, // 10: smartmesh.gateway_sc_close_req_v1.close_txn:type_name -> smartmesh.blockchain_txn_state_channel_close_v1
	0,  // 11: smartmesh.gateway_sc_follow_streamed_resp_v1.close_state:type_name -> smartmesh.close_state
	17, // 12: smartmesh.routing.addresses:type_name -> smartmesh.routing_address
	16, // 13: smartmesh.gateway_routing_streamed_resp_v1.routings:type_name -> smartmesh.routing
	8,  // 14: smartmesh.gateway.is_active_sc:input_type -> smartmesh.gateway_sc_is_active_req_v1
	10, // 15: smartmesh.gateway.is_overpaid_sc:input_type -> smartmesh.gateway_sc_is_overpaid_req_v1
	12, // 16: smartmesh.gateway.close_sc:input_type -> smartmesh.gateway_sc_close_req_v1
	14, // 17: smartmesh.gateway.follow_sc:input_type -> smartmesh.gateway_sc_follow_req_v1
	18, // 18: smartmesh.gateway.routing:input_type -> smartmesh.gateway_routing_req_v1
	1,  // 19: smartmesh.gateway.config:input_type -> smartmesh.gateway_config_req_v1
	3,  // 20: smartmesh.gateway.config_update:input_type -> smartmesh.gateway_config_update_req_v1
	5,  // 21: smartmesh.gateway.validators:input_type -> smartmesh.gateway_validators_req_v1
	7,  // 22: smartmesh.gateway.is_active_sc:output_type -> smartmesh.gateway_resp_v1
	7,  // 23: smartmesh.gateway.is_overpaid_sc:output_type -> smartmesh.gateway_resp_v1
	7,  // 24: smartmesh.gateway.close_sc:output_type -> smartmesh.gateway_resp_v1
	7,  // 25: smartmesh.gateway.follow_sc:output_type -> smartmesh.gateway_resp_v1
	7,  // 26: smartmesh.gateway.routing:output_type -> smartmesh.gateway_resp_v1
	7,  // 27: smartmesh.gateway.config:output_type -> smartmesh.gateway_resp_v1
	7,  // 28: smartmesh.gateway.config_update:output_type -> smartmesh.gateway_resp_v1
	7,  // 29: smartmesh.gateway.validators:output_type -> smartmesh.gateway_resp_v1
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_src_service_gateway_proto_init() }
func file_src_service_gateway_proto_init() {
	if File_src_service_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_service_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigUpdateStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayValidatorsReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayValidatorsRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsActiveReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsActiveRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsOverpaidReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsOverpaidRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScCloseReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScCloseRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScFollowReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScFollowStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoutingReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_service_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoutingStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_service_gateway_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GatewayRespV1_IsActiveResp)(nil),
		(*GatewayRespV1_IsOverpaidResp)(nil),
		(*GatewayRespV1_CloseResp)(nil),
		(*GatewayRespV1_FollowStreamedResp)(nil),
		(*GatewayRespV1_RoutingStreamedResp)(nil),
		(*GatewayRespV1_ConfigResp)(nil),
		(*GatewayRespV1_ConfigUpdateStreamedResp)(nil),
		(*GatewayRespV1_ValidatorsResp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_service_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_service_gateway_proto_goTypes,
		DependencyIndexes: file_src_service_gateway_proto_depIdxs,
		EnumInfos:         file_src_service_gateway_proto_enumTypes,
		MessageInfos:      file_src_service_gateway_proto_msgTypes,
	}.Build()
	File_src_service_gateway_proto = out.File
	file_src_service_gateway_proto_rawDesc = nil
	file_src_service_gateway_proto_goTypes = nil
	file_src_service_gateway_proto_depIdxs = nil
}
